{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue128;\red255\green255\blue255;
\red16\green113\blue198;\red207\green0\blue52;\red245\green245\blue248;\red235\green235\blue235;\red241\green241\blue241;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl420\sa360

\f0\fs28 \cf2 \cb3 Your grade is 
\fs56 19
\fs28 , which was calculated based on a combination of the grade you received from your peers and the grade you gave yourself.\
See below for details.\
\pard\pardeftab720\sl840\sa200

\b\fs32 \cf2 \cb4 A reminder about the Honor Code\
\pard\pardeftab720\sl420

\b0\fs28 \cf2 For previous mini-projects, we have had instances of students submitting solutions that have been copied from the web. Remember, if you can find code on the web for one of the mini-projects, we can also find that code. Submitting copied code violates the Honor Code for this class as well as Coursera's Terms of Service. Please write your own code and refrain from copying. If, during peer evaluation, you suspect a submitted mini-project includes copied code, please evaluate as usual and email the assignment details to {\field{\*\fldinst{HYPERLINK "mailto:interactivepython@online.rice.edu"}}{\fldrslt \cf5 interactivepython@online.rice.edu}}. We will investigate and handle as appropriate.
\b\fs48 \
\pard\pardeftab720\sl840\sa200
\cf2 Mini-project description - Spaceship\
\pard\pardeftab720\sl420\sa200

\b0\fs28 \cf2 In our last two mini-projects, we will build a 2D space game 
\i RiceRocks
\i0  that is inspired by the classic arcade game 
\i Asteroids
\i0  (1979). 
\i Asteroids
\i0  is a relatively simple game by today's standards, but was still immensely popular during its time. (Joe spent countless quarters playing it.) In the game, the player controls a spaceship via four buttons: two buttons that rotate the spaceship clockwise or counterclockwise (independent of its current velocity), a thrust button that accelerates the ship in its forward direction and a fire button that shoots missiles. Large asteroids spawn randomly on the screen with random velocities. The player's goal is to destroy these asteroids before they strike the player's ship. In the arcade version, a large rock hit by a missile split into several fast moving small asteroids that themselves must be destroyed. Occasionally, a flying saucer also crosses the screen and attempts to destroy the player's spaceship. Searching for "asteroids arcade" yields links to multiple versions of 
\i Asteroids
\i0  that are available on the web (including an updated version by 
\i Atari
\i0 , the original creator of 
\i Asteroids
\i0 ).\
\pard\pardeftab720\sl840\sa200

\b\fs32 \cf2 Mini-project development process\
\pard\pardeftab720\sl420

\b0\fs28 \cf2 For this mini-project, you will implement a working spaceship plus add a single asteroid and a single missile. We have provided art for your game so its look and feel is that of a more modern game. You should begin by loading the {\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#examples-spaceship_template.py"}}{\fldrslt 
\b \cf5 program template}}.The program template includes all necessary image and audio files. Unfortunately, no audio format is supported by all major browsers so we have decided to provided sounds in the 
\f1\fs24 \cf6 \cb7 mp3
\f0\fs28 \cf2 \cb4  format which is supported by Chrome (but not by Firefox on some systems). (
\f1\fs24 \cf6 \cb7 ogg
\f0\fs28 \cf2 \cb4  versions are also available.) 
\b We highly recommend using Chrome for the last two weeks of the class.
\b0  We have found that Chrome typically has better performance on games with more substantial drawing requirements and standardization on a common browser will make peer assessing projects more reliable.\
\pard\pardeftab720\sl420\sa200

\b \cf2 Phase one - Spaceship
\b0 \
In this phase, you will implement the control scheme for the spaceship.This includes a complete Spaceship class and the appropriate keyboard handlers to control the spaceship. Your spaceship should behave as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls1\ilvl0\cf2 {\listtext	\'95	}The left and right arrows should control the orientation of your spaceship. While the left arrow is held down, your spaceship should turn counter-clockwise. While the right arrow is down, your spaceship should turn clockwise. When neither key is down, your ship should maintain its orientation. You will need to pick some reasonable angular velocity at which your ship should turn.\
{\listtext	\'95	}The up arrow should control the thrusters of your spaceship. The thrusters should be on when the up arrow is down and off when it is up. When the thrusters are on, you should draw the ship with thrust flames. When the thrusters are off, you should draw the ship without thrust flames.\
{\listtext	\'95	}When thrusting, the ship should accelerate in the direction of its forward vector. This vector can be computed from the orientation/angle of the ship using the provided helper function 
\f1\fs24 \cf6 \cb7 angle_to_vector
\f0\fs28 \cf2 \cb4 . You will need to experiment with scaling each component of this acceleration vector to generate a reasonable acceleration.\
{\listtext	\'95	}Remember that while the ship accelerates in its forward direction, but the ship always moves in the direction of its velocity vector. Being able to accelerate in a direction different than the direction that you are moving is a hallmark of 
\i Asteroids
\i0 .\
{\listtext	\'95	}Your ship should always experience some amount of friction. (Yeah, we know, "Why is there friction in the vacuum of space?". Just trust us there is in this game.) This choice means that the velocity should always be multiplied by a constant factor less than one to slow the ship down. It will then come to a stop eventually after you stop the thrusters.\
\pard\pardeftab720\sl420
\cf2 Now, implement these behaviors above in order. Each step should require just a few lines of code. Here are some hints:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls2\ilvl0\cf2 {\listtext	1.	}Modify the draw method for the Ship class to draw the ship image (without thrust flames) instead of a circle. This method should incorporate the ship's position and angle. Note that the angle should be in radians, not degrees. Since a call to the ship's draw method already exists in the draw handler, you should now see the ship image. Experiment with different positions and angles for the ship.\
{\listtext	2.	}Implement an initial version of the update method for the ship. This version should update the position of the ship based on its velocity. Since a call to the update method also already exists in the draw handler, the ship should move in response to different initial velocities.\
{\listtext	3.	}Modify the update method for the ship to increment its angle by its angular velocity.\
{\listtext	4.	}Make your ship turn in response to the left/right arrow keys. Add keydown and keyup handlers that check the left and right arrow keys. Add methods to the Ship class to increment and decrement the angular velocity by a fixed amount. (There is some flexibility in how you structure these methods.) Call these methods in the keyboard handlers appropriately and verify that you can turn your ship as you expect.\
{\listtext	5.	}Modify the keyboard handlers to turn the ship's thrusters on/off. Add a method to the Ship class to turn the thrusters on/off (you can make it take a Boolean argument which is True or False to decide if they should be on or off).\
{\listtext	6.	}Modify the ship's draw method to draw the thrust image when it is on. (The ship image is tiled and contains both images of the ship.)\
{\listtext	7.	}Modify the ship's thrust method to play the thrust sound when the thrust is on. Rewind the sound when the thrust turns off.\
{\listtext	8.	}Add code to the ship's update method to use the given helper function 
\f1\fs24 \cf6 \cb7 angle_to_vector
\f0\fs28 \cf2 \cb4  to compute the forward vector pointing in the direction the ship is facing based on the ship's angle.\
{\listtext	9.	}Next, add code to the ship's update method to accelerate the ship in the direction of this forward vector when the ship is thrusting. You will need to update the velocity vector by a small fraction of the forward acceleration vector so that the ship does not accelerate too fast.\
{\listtext	10.	}Then, modify the ship's update method such that the ship's position wraps around the screen when it goes off the edge (use modular arithmetic!).\
{\listtext	11.	}Up to this point, your ship will never slow down. Finally, add friction to the ship's update method as shown in the "Acceleration and Friction" video by multiplying each component of the velocity by a number slightly less than 1 during each update.\
\pard\pardeftab720\sl420
\cf2 You should now have a ship that flies around the screen,as you would like for 
\i RiceRocks
\i0 . Adjust the constants as you would like to get it to fly how you want.\
\pard\pardeftab720\sl420\sa200
\cf2 \
\pard\pardeftab720\sl420\sa200

\b \cf2 Phase two - Rocks
\b0 \
To implement rocks, we will use the provided Sprite class. Note that the update method for the sprite will be very similar to the update method for the ship. The primary difference is that the ship's velocity and rotation are controlled by keys, whereas sprites have these set randomly when they are created. Rocks should screen wrap in the same manner as the ship.\
In the template, the global variable 
\f1\fs24 \cf6 \cb7 a_rock
\f0\fs28 \cf2 \cb4  is created at the start with zero velocity. Instead, we want to create version of 
\f1\fs24 \cf6 \cb7 a_rock
\f0\fs28 \cf2 \cb4  once every second in the timer handler. Next week, we will add multiple rocks. This week, the ship will not die if it hits a rock. We'll add that next week. To implement rocks, we suggest the following:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls3\ilvl0\cf2 {\listtext	1.	}Complete the Sprite class (as shown in the "Sprite class" video) by modifying the draw handler to draw the actual image and the update handler to make the sprite move and rotate. Rocks do not accelerate or experience friction, so the sprite update method should be simpler than the ship update method. Test this by giving 
\f1\fs24 \cf6 \cb7 a_rock
\f0\fs28 \cf2 \cb4 \'a0different starting parameters and ensuring it behaves as you expect.\
{\listtext	2.	}Implement the timer handler 
\f1\fs24 \cf6 \cb7 rock_spawner
\f0\fs28 \cf2 \cb4 . In particular, set 
\f1\fs24 \cf6 \cb7 a_rock
\f0\fs28 \cf2 \cb4  to be a new rock on every tick. (Don't forget to declare 
\f1\fs24 \cf6 \cb7 a_rock
\f0\fs28 \cf2 \cb4  as a global in the timer handler.) Choose a velocity, position, and angular velocity randomly for the rock. You will want to tweak the ranges of these random numbers, as that will affect how fun the game is to play. Make sure you generated rocks that spin in both directions and, likewise, move in all directions.\
\pard\pardeftab720\sl420

\b \cf2 Phase three - Missiles
\b0 \
\pard\pardeftab720\sl420\sa200
\cf2 To implement missiles, we will use the same sprite class as for rocks. Missiles will always have a zero angular velocity. They will also have a lifespan (they should disappear after a certain amount of time or you will eventually have missiles all over the place), but we will ignore that this week. Also, for now, we will only allow a single missile and it will not yet blow up rocks. We'll add more next week.\
Your missile should be created when you press the spacebar, not on a timer like rocks. They should screen wrap just as the ship and rocks do. Otherwise, the process is very similar:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls4\ilvl0\cf2 {\listtext	1.	}Add a 
\f1\fs24 \cf6 \cb7 shoot
\f0\fs28 \cf2 \cb4  method to your ship class. This should spawn a new missile (for now just replace the old missile in 
\f1\fs24 \cf6 \cb7 a_missile
\f0\fs28 \cf2 \cb4 ). The missile's initial position should be the tip of your ship's "cannon". Its velocity should be the sum of the ship's velocity and a multiple of the ship's forward vector.\
{\listtext	2.	}Modify the keydown handler to call this shoot method when the spacebar is pressed.\
{\listtext	3.	}Make sure that the missile sound is passed to the sprite initializer so that the shooting sound is played whenever you shoot a missile.\
\pard\pardeftab720\sl420

\b \cf2 Phase four - User interface
\b0 \
\pard\pardeftab720\sl420\sa200
\cf2 Our user interface for 
\i RiceRocks
\i0  simply shows the number of lives remaining and the score. This week neither of those elements ever change, but they will next week. Add code to the draw event handler to draw these on the canvas. Use the 
\f1\fs24 \cf6 \cb7 lives
\f0\fs28 \cf2 \cb4  and 
\f1\fs24 \cf6 \cb7 score
\f0\fs28 \cf2 \cb4  global variables as the current lives remaining and score.\
\pard\pardeftab720\sl840\sa200

\b\fs32 \cf2 Grading rubric - 20 pts total (scaled to 100 pts)\
\pard\pardeftab720\sl420

\b0\fs28 \cf2 When testing the functionality of your peer's projects, remember that some keyboards don't register more three or more simultaneous key presses correctly (see {\field{\*\fldinst{HYPERLINK "https://class.coursera.org/interactivepython-002/forum/thread?thread_id=3632"}}{\fldrslt \cf5 this thread}}). So please assess based on single key presses or combinations of two key presses. Also, please assess your peer's mini-projects in Chrome. 
\b If, for some reason, you must use Firefox or another browser (or had issues playing sounds in Chrome), please give your peers full credit on the two sound-related rubric items.
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls5\ilvl0\cf2 {\listtext	\'95	}1 pt - The program draws the ship as an image.\
{\listtext	\'95	}1 pt - The ship flies in a straight line when not under thrust.\
{\listtext	\'95	}1 pt - The ship rotates at a constant angular velocity in a counter clockwise direction when the left arrow key is held down.\
{\listtext	\'95	}1 pt - The ship rotates at a constant angular velocity in the clockwise direction when the right arrow key is held down.\
{\listtext	\'95	}1 pt - The ship's orientation is independent of its velocity.\
{\listtext	\'95	}1 pt - The program draws the ship with thrusters on when the up arrow is held down.\
{\listtext	\'95	}1 pt - The program plays the thrust sound only when the up arrow key is held down.\
{\listtext	\'95	}1 pt - The ship accelerates in its forward direction when the thrust key is held down.\
{\listtext	\'95	}1 pt - The ship's position wraps to the other side of the screen when it crosses the edge of the screen.\
{\listtext	\'95	}1 pt - The ship's velocity slows to zero while the thrust is not being applied.\
{\listtext	\'95	}1 pt - The program draws a rock as an image.\
{\listtext	\'95	}1 pt - The rock travels in a straight line at a constant velocity.\
{\listtext	\'95	}1 pt - The rock is respawned once every second by a timer.\
{\listtext	\'95	}1 pt - The rock has a random spawn position, spin direction and velocity.\
{\listtext	\'95	}1 pt - The program spawns a missile when the space bar is pressed.\
{\listtext	\'95	}1 pt - The missile spawns at the tip of the ship's cannon.\
{\listtext	\'95	}1 pt - The missile's velocity is the sum of the ship's velocity and a multiple of its forward vector.\
{\listtext	\'95	}1 pt - The program plays the missile firing sound when the missile is spawned.\
{\listtext	\'95	}1 pt - The program draws appropriate text for lives on the upper left portion of the canvas.\
{\listtext	\'95	}1 pt - The program draws appropriate text for score on the upper right portion of the canvas.\
\pard\pardeftab720\sl420\sa200
\cf2 \cb8 In the submission phase, cut and paste the URL for your cloud-saved mini-project into the box below. Hit the "Submit for grading" button when you are ready to submit your mini-project.\
When evaluating, copy and paste the link above into a new browser tab, to load your peer's program into CodeSkulptor. Evaluate your peer's program according to the rubric below and hit "Submit" when your evaluation is complete.\
\pard\pardeftab720\sl420
{\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#user16_cq3knjBBbK_3.py"}}{\fldrslt \cf5 \cb9 http://www.codeskulptor.org/#user16_cq3knjBBbK_3.py}}\cb9 \
}